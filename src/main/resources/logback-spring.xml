<?xml version="1.0" encoding="UTF-8" ?>
<!-- TRACE: 가장 낮은 로그 레벨로, 매우 상세한 정보를 포함합니다. 일반적으로 개발 중에 디버깅을 위해 사용됩니다.
     DEBUG: 디버깅에 사용되는 로그 레벨로, 개발 중에 상태와 정보를 추적하는 데 도움을 줍니다.
      INFO: 정보성 메시지를 나타내는 로그 레벨로, 어떤 동작이 성공적으로 이루어졌거나 중요한 이벤트를 나타냅니다.
      WARN: 경고성 메시지를 나타내는 로그 레벨로, 잠재적인 문제가 발생했지만 애플리케이션은 계속 실행될 수 있습니다.
     ERROR: 오류를 나타내는 로그 레벨로, 중대한 문제가 발생하여 애플리케이션의 일부 또는 전체가 올바르게 수행되지 않을 수 있습니다.
       OFF: 모든 로그를 비활성화하는 로그 레벨입니다. 가장 높은 우선순위로, 로그를 출력하지 않습니다.

<configuration> 요소 : Logback 설정 파일의 루트 요소로, 모든 설정은 이 안에 포함됩니다.
    속성 (<property>) : LOG_PATTERN: 로그 출력 형식을 정의하는 패턴을 지정합니다.
                     :  LOG_PATH: 로그 파일 경로를 정의합니다.
    어펜더 (<appender>) : CONSOLE: 콘솔에 로그를 출력하는 앱던더 설정입니다.
                       : FILE: 파일에 로그를 출력하고 롤링하는 앱던더 설정입니다. (RollingFileAppender 사용)
    로그 출력 형식 (<encoder>) : encoder 요소 내부에서 LOG_PATTERN 속성을 사용하여 로그 출력 형식을 설정합니다.
    로그 파일 롤링 정책 (<rollingPolicy>) : rollingPolicy 요소 내부에서 파일 롤링 정책을 설정합니다.
                                         여기서는 시간 및 파일 크기 기반 롤링 정책을 사용하고, 최대 파일 크기와 보존 기간을 지정합니다.
    루트 로거 설정 (<root>) : 모든 로그의 기본 로그 레벨을 설정합니다.
                            appender-ref 요소를 사용하여 해당 로그 레벨에 대한 출력 앱던더를 지정합니다.
                            여기서는 콘솔 출력 (CONSOLE)과 파일 출력 (FILE) 앱던더를 사용합니다. -->
<configuration>
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <property file="src/main/resources/application.properties" />

<!--    <property name="CONSOLE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %clr(%5level) %cyan(%logger) - %msg%n" />-->
<!--    <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %5level %logger - %msg%n" />-->

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>%d{yyyy-MM-dd HH:mm:ss} [%-5level] %logger{36} - %msg%n</Pattern>
        </layout>
    </appender>

    <appender name="APP" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${FILE_PATH}/app/app.log</file>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss:%-3relative} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${FILE_PATH}/app.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- or whenever the file size reaches 100MB -->
                <maxFileSize>50MB</maxFileSize>
                <!-- kb, mb, gb -->
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

 

        <appender name="LOG_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${FILE_PATH}/info/info.log</file>
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <!-- 로그를 호출한 클래스와 메소드도 함께 출력 -->
            <includeCallerData>true</includeCallerData>
            <!-- 호스트명을 기록하기 위해 아래의 옵션을 사용 -->
<!--            <includeContext>false</includeContext>-->
            <!-- 로그에서 "호스트"란 보통 로그를 생성하는 시스템, 서버, 또는 컴퓨터를 뜻함-->
<!--            <customFields>{"hostname":"${HOSTNAME}"}</customFields>-->
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${FILE_PATH}/info/info.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 시간 및 파일 크기 기반 롤링 정책 설정 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- or whenever the file size reaches 50MB -->
                <maxFileSize>50MB</maxFileSize>
                <!-- kb, mb, gb -->
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 보관할 로그 파일의 최대 기록 횟수를 설정 -->
            <maxHistory>100</maxHistory>
        </rollingPolicy>
    </appender>

            <appender name="LOG_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${FILE_PATH}/error/error.log</file>
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <!-- 로그를 호출한 클래스와 메소드도 함께 출력 -->
            <includeCallerData>true</includeCallerData>
            <!-- 호스트명을 기록하기 위해 아래의 옵션을 사용 -->
<!--            <includeContext>false</includeContext>-->
            <!-- 로그에서 "호스트"란 보통 로그를 생성하는 시스템, 서버, 또는 컴퓨터를 뜻함-->
<!--            <customFields>{"hostname":"${HOSTNAME}"}</customFields>-->
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${FILE_PATH}/error/error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 시간 및 파일 크기 기반 롤링 정책 설정 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- or whenever the file size reaches 50MB -->
                <maxFileSize>50MB</maxFileSize>
                <!-- kb, mb, gb -->
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 보관할 로그 파일의 최대 기록 횟수를 설정 -->
            <maxHistory>100</maxHistory>
        </rollingPolicy>
    </appender>

    <logger name="com.nexmotion.Account" level="DEBUG" additivity="false">
        <!-- AbstractRequester.class 로그는 LOG_INFO appender 만 사용하고, root 로거는 상속 받지 않음(additivity=false) -->
        <!-- private Logger logger = LoggerFactory.getLogger("AbstractRequester.class"); -->
        <appender-ref ref="STDOUT" />
        <appender-ref ref="LOG_ERROR" />
    </logger>

    <logger name="AbstractRequester.class" level="DEBUG" additivity="false">
        <!-- AbstractRequester.class 로그는 LOG_INFO appender 만 사용하고, root 로거는 상속 받지 않음(additivity=false) -->
        <!-- private Logger logger = LoggerFactory.getLogger("AbstractRequester.class"); -->
        <appender-ref ref="STDOUT" />
        <appender-ref ref="LOG_ERROR" />
    </logger>

    <logger name="SyncData.class" level="DEBUG" additivity="false">
        <!-- AbstractRequester.class 로그는 LOG_INFO appender 만 사용하고, root 로거는 상속 받지 않음(additivity=false) -->
        <!-- private Logger logger = LoggerFactory.getLogger("AbstractRequester.class"); -->
        <appender-ref ref="STDOUT" />
        <appender-ref ref="LOG_ERROR" />
    </logger>

    <logger name="ParseOrganXML.class" level="DEBUG" additivity="false">
        <!-- AbstractRequester.class 로그는 LOG_INFO appender 만 사용하고, root 로거는 상속 받지 않음(additivity=false) -->
        <!-- private Logger logger = LoggerFactory.getLogger("AbstractRequester.class"); -->
        <appender-ref ref="STDOUT" />
        <appender-ref ref="LOG_ERROR" />
    </logger>

    <logger name="com.nexmotion.Account" level="INFO" additivity="false">
        <!-- AbstractRequester.class 로그는 LOG_INFO appender 만 사용하고, root 로거는 상속 받지 않음(additivity=false) -->
        <!-- private Logger logger = LoggerFactory.getLogger("AbstractRequester.class"); -->
        <appender-ref ref="STDOUT" />
        <appender-ref ref="LOG_INFO" />
    </logger>


    <root level="${ROOT_LEVEL}">
        <appender-ref ref="STDOUT" />
    </root>
</configuration>